#version 430 core

layout (local_size_x = 1, local_size_y = 1) in;

layout (binding = 0) uniform sampler2D heightMap;

layout (binding = 0, rgba32f) writeonly uniform image2D normalMap;

uniform float N;
uniform float normalStrength;

float getHeight(vec2 pos) {
    return texture(heightMap, pos).y;
}

void main(void) {

	uint x = gl_GlobalInvocationID.x, y = gl_GlobalInvocationID.y;
	
    vec2 texCoord = gl_GlobalInvocationID.xy / N;
    float texelSize = 1.0 / N;

    float z0 = getHeight(texCoord + vec2(-texelSize, -texelSize));
	float z1 = getHeight(texCoord + vec2(0.0, -texelSize));
	float z2 = getHeight(texCoord + vec2(texelSize, -texelSize));
	float z3 = getHeight(texCoord + vec2(-texelSize, 0.0));
	float z4 = getHeight(texCoord + vec2(texelSize, 0.0));
	float z5 = getHeight(texCoord + vec2(-texelSize, texelSize));
	float z6 = getHeight(texCoord + vec2(0.0, texelSize));
	float z7 = getHeight(texCoord + vec2(texelSize, texelSize));

    vec3 normal = vec3(0.0);
    normal.y = normalStrength;
    normal.x = z0 + 2 * z3 + z5 - z2 - 2 * z4 - z7;
    normal.z = z0 + 2 * z1 + z2 - z5 - 2 * z6 - z7;
    
    imageStore(normalMap, ivec2(x, y), vec4(normalize(normal), 1.0));
}